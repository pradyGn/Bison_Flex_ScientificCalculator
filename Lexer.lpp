%{

#include<iostream>
#include<stdlib.h>
#include"Parser.tab.hpp"
%}

%option noyywrap

%%

[0-9]+("."[0-9]+)? {yylval.val = atof(yytext); return NUM;}
"log2" {return LOG2;}
"log10" {return LOG10;}
"!" {return FACT;}
"PI" {return PI;}
"**" {return POW;}
"sqrt" {return SQRT;}
"+" {return PLUS;}
"-" {return MIN;}
"*" {return MUL;}
"/" {return DIV;}
"mod" {return MOD;}
"abs" {return ABS;}
"floor" {return FLO;}
"ceil" {return CEI;}
"sin" {return SIN;}
"cos" {return COS;}
"tan" {return TAN;}
"(" {return LBR;}
")" {return RBR;}
"gbp_to_usd" {return PTOD;}
"usd_to_gbp" {return DTOP;}
"euro_to_gbp" {return ETOP;}
"gbp_to_euro" {return PTOE;}
"euro_to_usd" {return ETOD;}
"usd_to_euro" {return DTOE;}
"mi_to_km" {return MTOK;}
"km_to_mi" {return KTOM;}
"cel_to_fah" {return CFAH;}
"fah_to_cel" {return FAHC;}
"=" {return EQ;}
"var" {return VAR_KEYWORD;}
[a-zA-z][0-9a-zA-Z]* {yylval.str = strdup(yytext); return VAR;}
[\n] {return EOL;}
[ \t] {}
. {std::cerr << "Error: Undefined Symbol" << std::endl; exit(1);}

%%